<% import com.example.app._ %>
<% import scala.collection.mutable.HashMap %>
<% import java.text.SimpleDateFormat %>
<% import java.util.Date %>
<%@ val usuarios_hoy: List[((Usuario, Int), Int)] = Nil %>
<%@ val usuarios_ayer: List[((Usuario, Int), Int)] = Nil %>
<%@ val mensajes: List[((MensajeChat,Usuario), Int)] %>
<%@ val df: SimpleDateFormat = new SimpleDateFormat("dd/MM/yyyy") %>
<%@ val user: Usuario = null%>
<%@ val puntosAcumuladosPorUsuarioPorDia: List[(Date,HashMap[Usuario,Int])] %>

<script src="/amcharts/amcharts.js" type="text/javascript"></script>
<script src="/amcharts/serial.js" type="text/javascript"></script>
<div id="chartdiv" style="width: 100%; height: 400px;"></div>

<table class="table">
    <thead>
      <tr>
         <th>Posici&oacute;n</th>
         <th>Kangri</th>
         <th>Puntuaci&oacute;n</th>
      </tr>
     </thead>
     <tbody>
      #for (((u,pts),pos) <- usuarios_hoy)
        <% val pts_ayer: Int = usuarios_ayer.find(_._1._1 == u).get._1._2 %>
        <% val pos_hoy = pos + 1 %>
        <% val pos_ayer: Int = usuarios_ayer.find(_._1._1 == u).get._2 + 1%>
      <tr>
          <td>
            <img class="profile-img" src="/images/fotos/${u.ident}.jpg"/>
            <a href="/predicciones/${u.ident}">${(pos + 1)}</a>

                 <% val diff = pos_ayer - pos_hoy %>
                            #if (diff > 0)
                                #for (x <- 1 to diff)
                                    <span style="color: green;" class="glyphicon glyphicon-arrow-up"></span>
                                #end
                            #else
                                #for (x <- 1 to (diff*(-1)))
                                    <span style="color:red;" class="glyphicon glyphicon-arrow-down"> </span>
                                #end
                            #end
            </td>
          <td><a href="/predicciones/${u.ident}">${u.ident}</a></td>

          <td><a href="/predicciones/${u.ident}"><strong>${pts}</strong>




            <span style="color: green;">(+${pts - pts_ayer})</span>
          </a>
          </td>
      </tr>
      #end
     </tbody>
</table>

<script type="text/javascript">
   var chart;
   var chartData = [];

   AmCharts.ready(function () {
       // generate some random data first
       generateChartData();

       // SERIAL CHART
       chart = new AmCharts.AmSerialChart();
       AmCharts.theme = AmCharts.themes.light;
       chart.theme = AmCharts.themes.dark;
       chart.pathToImages = "/amcharts/";
       chart.dataProvider = chartData;
       chart.categoryField = "fecha";
       chart.dataDateFormat = "DD-MM-YYYY";

       // listen for "dataUpdated" event (fired when chart is inited) and call zoomChart method when it happens
       chart.addListener("dataUpdated", zoomChart);

       // AXES
       // category
       var categoryAxis = chart.categoryAxis;
       categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true
       categoryAxis.minPeriod = "DD"; // our data is daily, so we set minPeriod to DD
       categoryAxis.minorGridEnabled = true;
       categoryAxis.axisColor = "#DADADA";
       categoryAxis.twoLineMode = true;
       categoryAxis.dateFormats = [{
            period: 'fff',
            format: 'JJ:NN:SS'
        }, {
            period: 'ss',
            format: 'JJ:NN:SS'
        }, {
            period: 'mm',
            format: 'JJ:NN'
        }, {
            period: 'hh',
            format: 'JJ:NN'
        }, {
            period: 'DD',
            format: 'DD-MMMM'
        }, {
            period: 'WW',
            format: 'DD'
        }, {
            period: 'MM',
            format: 'MMM'
        }, {
            period: 'YYYY',
            format: 'YYYY'
        }];

       // first value axis (on the left)
       var valueAxis1 = new AmCharts.ValueAxis();
       valueAxis1.axisColor = "#FF6600";
       valueAxis1.axisThickness = 2;
       valueAxis1.gridAlpha = 0;
       chart.addValueAxis(valueAxis1);

       // second value axis (on the right)
       var valueAxis2 = new AmCharts.ValueAxis();
       valueAxis2.position = "right"; // this line makes the axis to appear on the right
       valueAxis2.axisColor = "#FCD202";
       valueAxis2.gridAlpha = 0;
       valueAxis2.axisThickness = 2;
       chart.addValueAxis(valueAxis2);

       // third value axis (on the left, detached)
       valueAxis3 = new AmCharts.ValueAxis();
       valueAxis3.offset = 3; // this line makes the axis to appear detached from plot area
       valueAxis3.gridAlpha = 0;
       valueAxis3.axisColor = "#B0DE09";
       valueAxis3.axisThickness = 2;
       chart.addValueAxis(valueAxis3);

//       colors = ['#FF6600', '#FCD202', '#B0DE09', '#0D8ECF', '#2A0CD0', '#CD0D74', '#CC0000', '#00CC00', '#0000CC', '#DDDDDD', '#999999', '#333333', '#990000']

       #for (((u,_),_) <- usuarios_hoy)
            // second graph
            var graph${u.id} = new AmCharts.AmGraph(AmCharts.themes.light);
            graph${u.id}.valueAxis = valueAxis2; // we have to indicate which value axis should be used
            graph${u.id}.title = "${u.ident}";
            graph${u.id}.valueField = "${u.id}";
            graph${u.id}.balloonText = "${u.ident}, puntos: [[value]]";
            graph${u.id}.showBalloon = true;
            graph${u.id}.bullet = "round";
            //graph2.hideBulletsCount = 30;
            graph${u.id}.bulletBorderThickness = 1;
            chart.addGraph(graph${u.id});
       #end


       // CURSOR
       var chartCursor = new AmCharts.ChartCursor();
       chartCursor.cursorAlpha = 0.1;
       chartCursor.fullWidth = true;
       chart.addChartCursor(chartCursor);

       // SCROLLBAR
       var chartScrollbar = new AmCharts.ChartScrollbar();
       chart.addChartScrollbar(chartScrollbar);

       // LEGEND
       var legend = new AmCharts.AmLegend();
       legend.marginLeft = 110;
       legend.useGraphSettings = true;
       chart.addLegend(legend);

       // WRITE
       chart.write("chartdiv");
   });

   // generate some random data, quite different range
   function generateChartData() {
       #for ((dia, puntosAcumuladosPorUsuario) <- puntosAcumuladosPorUsuarioPorDia)
        chartData.push({
            #for ((usuario, puntosAcumulados) <- puntosAcumuladosPorUsuario)
                ${usuario.id}: ${puntosAcumulados},
            #end
            fecha: "${df.format(dia)}"
        });
       #end
   }

   // this method is called when chart is first inited as we listen for "dataUpdated" event
   function zoomChart() {
       // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
       //chart.zoomToIndexes(10, 20);
   }
</script>

